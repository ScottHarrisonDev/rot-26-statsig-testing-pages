---
import Layout from '../layouts/Layout.astro';
import { StatsigClient } from '@statsig/js-client';
const { env } = Astro.locals.runtime;

const cookies = Astro.request.headers.get('cookie') || '';
const userUUIDCookie = cookies
  .split('; ')
  .find((cookie) => cookie.startsWith('userUUID='))
  ?.split('=')[1] || 'undefined';

const statsigUser = {
    userID: userUUIDCookie,
    email: 'scott.harrison@studiorotate.com'
}

// Fetch Statsig features and experiments
const statsigAssignmentsResponse = await fetch(env.STATSIG_AGGREGATOR_URL, {
    body: JSON.stringify({userID: userUUIDCookie}),
    method: "POST"
});
const statsigAssignmentsRaw = await statsigAssignmentsResponse.json()

const statsigAssignments = Object.values(statsigAssignmentsRaw)
  .filter(({ value }) => value)
  .map(({ name }) => name);

// Send event from Astro, for example page load
const statsigClient = new StatsigClient(
  env.STATSIG_CLIENT_KEY, 
  statsigUser
);

await statsigClient.initializeAsync();
statsigClient.logEvent("page_view", "home", {
  test_parameter: "test value",
});

await statsigClient.flush();
---

<Layout title="Welcome to Astro.">
	<main>
		<h1>CF Workers with <span class="text-gradient">Statsig</span></h1>
		<p class="instructions">
			This is an example CF Pages site which will represent a client website. There is a Cookie Middleware Worker which handles the userUUID cookie assignment used when communicating with Statsig. There is also a Statsig Aggregator Worker which accepts the Statsig userID and returns a full list of feature keys and experiments applicable to the current session.
		</p>
		<p class="data">
			Your current <code>userUUID</code> cookie is: <code>{ userUUIDCookie }</code>. This is set by the CF Worker.
            <br /><br />
            A Statsig event for <code>page_view</code> has been logged by Astro.
            <br /><br />
            Click this button to trigger a client side <code>add_to_cart</code> event. <button data-user-uuid-cookie={userUUIDCookie} id="atc-btn" type="button">Send ATC Event</button>
            <br /><br />
            The test gates which are passing for this session are: <code>{ statsigAssignments.join() }</code>
		</p>
	</main>
</Layout>

<script is:inline>
import { StatsigClient } from '@statsig/js-client';

const button = document.getElementById('atc-btn');
const userUUIDCookie = button.dataset.userUuidCookie;

const statsigClient = new StatsigClient(
	env.STATSIG_CLIENT_KEY, 
    { userID: userUUIDCookie }
);

button.addEventListener('click', async () => {
    // Send event from JS, for example user clicks ATC button
    await statsigClient.initializeAsync();
    statsigClient.logEvent("add_to_cart", "SKU_12345", {
        price: "9.99",
        item_name: "diet_coke_48_pack",
    });
    await statsigClient.flush();
})

</script>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.data {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: #303030;
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
    button {
        padding: 6px 12px;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
        color: #fff;
        border-radius: 4px;
        cursor: pointer;
    }
</style>